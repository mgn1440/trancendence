import { init } from "parcel-bundler";
import { updateElement } from "./diff";
// import { shallowEqual } from "./utils/object";

const domRenderer = () => {
  const options = {
    states: [],
    stateHook: 0,
    dependencies: [],
    effectHook: 0,
    effectList: [],
  }

  const renderInfo = {
    $root: null,
    component: null,
    currentVDOM: null,
  }

  const resetOptions = () => {
    options.states = [];
    options.stateHook = 0;
    options.dependencies = [];
    options.effectHook = 0;
    options.effectList = [];
  }

  const _render = () => {
    const { $root, component, currentVDOM } = renderInfo;
    if (!$root || !component) return;

    const newVDOM = component();
    updateElement($root, newVDOM, currentVDOM);
    options.stateHook = 0;
    options.effectHook = 0;
    renderInfo.currentVDOM = newVDOM;
  }

  const render = (root, component) => {
    resetOptions();
    renderInfo.$root = root;
    renderInfo.component = component;
    _render();
  }

  // const useState = (initialState) => {
  //   const { stateHook, states } = options;
  //   const state = (states[stateHook] ?? initialState);
  //   const setState = (newState) => {
  //     // if (shallowEqual(state, newState)) return;
  //     state[stateHook] = newState;
  //     // queueMicrotask(_render);
  //     _render();
  //   }
  //   options.stateHook += 1;
  //   return [state, setState];
  // }
  
  return { render };
}
export const { render } = domRenderer();