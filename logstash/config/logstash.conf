input {
  file {
	path => "/django/django_error.log"
	start_position => "beginning"
	type => "django_error"
	codec => multiline { 
      pattern => "%{TIMESTAMP_ISO8601:log_timestamp} \[%{WORD:log_level}\] %{WORD}=%{GREEDYDATA:content}"
      negate => true
      what => "previous"
    }
  }
  file {
	path => "/django/gunicorn_error.log"
	start_position => "beginning"
	type => "websocket_log"
  }
  file {
	path => "/django/gunicorn_access.log"
	start_position => "beginning"
	type => "django_api"
  }
}

filter {
	if [type] == "websocket_log"
	{
		grok {
			match => { 
				"message" => [
								'.*%{IPV4:ip}.* %{NUMBER:port}.*\"%{WORD:protocol} %{GREEDYDATA:path}\"'
							]
			}
		}
		if "_grokparsefailure" in [tags] {
			drop {}
		}
	}
	if [type] == "django_api"
	{
		grok {
			match => { 
				"message" => [
								'.*%{WORD:api_method} %{GREEDYDATA:api_path}\/%{GREEDYDATA}\/ HTTP/%{NUMBER:http_version}" %{NUMBER:status_code}'
							]
			}
		}
		if "_grokparsefailure" in [tags] {
			drop {}
		}
	}
	grok {
		match => { 
			"message" => [
							"%{TIMESTAMP_ISO8601:log_timestamp} \[%{WORD:log_level}\] %{WORD}=%{GREEDYDATA:content}", 
							"'type': '%{DATA:socket_type}'"
						]
			}
	}
	date {
		match => [ "log_timestamp", "MMM D, YYYY @ HH:mm:ss.SSS)" ]
		target => "converted_timestamp"
		timezone => "UTC"
  	}
}
  
#   mutate {
#     remove_field => [ "message", "log", "event", "@version", "host", "movie_rating", "@timestamp" ]
#   }

# echo -n | openssl s_client -connect elasticsearch:9200 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > ./ca_logstash.cer
output {
  	elasticsearch {
		hosts => ["https://elasticsearch:9200"]
		index => "django-%{+YYYY.MM.dd}"
		user => 'elastic'
		password => '${ELASTIC_PASSWORD}'
		ssl => true
		# ssl_certificate => '/usr/share/logstash/config/certs/ca/ca.crt'
		cacert => '/usr/share/logstash/config/certs/ca/ca.crt'
		# ssl_enabled => true
  }
}