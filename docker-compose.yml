# version: "3"
services:
  frontend:
    build:
      context: ${FE_PATH}
      dockerfile: Dockerfile.frontend
    container_name: frontend
    env_file:
      - ${FE_ENV_PATH}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 10s
      timeout: 5s
      retries: 5
    init: true
    ports:
      - "5173:5173"
    restart: on-failure:3
    volumes:
      - ${FE_PATH}:/app
    tty: true
    networks:
      - transcendence
  backend:
    build:
      context: ${BE_PATH}
      dockerfile: Dockerfile.backend
    container_name: backend
    env_file:
      - ${BE_ENV_PATH}
    # environment:
    #   POSTGRES_DB: postgres
    #   POSTGRES_USER: postgres
    #   POSTGRES_PASSWORD: postgres
    #   DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
    #   DJANGO_DEBUG: ${DJANGO_DEBUG}
    #   DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
    #   DJANGO_DB_ENGINE: ${DJANGO_DB_ENGINE}
    #   DJANGO_DB_NAME: ${DJANGO_DB_NAME}
    #   DJANGO_DB_USER: ${DJANGO_DB_USER}
    #   DJANGO_DB_PASSWORD: ${DJANGO_DB_PASSWORD}
    #   DJANGO_DB_HOST: ${DJANGO_DB_HOST}
    #   DJANGO_DB_PORT: ${DJANGO_DB_PORT}
    #   DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
    #   DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
    #   DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ${BE_PATH}:/code
    init: true
    ports:
      - "8000:8000"
    restart: on-failure:3
    tty: true
    networks:
      - transcendence
  postgresql:
    container_name: postgresql
    env_file:
      - ${BE_ENV_PATH}
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      DJANGO_DB_USER: postgres
      # POSTGRES_DB: ${DJANGO_DB_NAME}
      # POSTGRES_USER: ${DJANGO_DB_USER}
      # POSTGRES_PASSWORD: ${DJANGO_DB_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    init: true
    image: postgres:latest
    ports:
      - "5432:5432"
    restart: on-failure:3
    tty: true
    networks:
      - transcendence

  nginx:
    container_name: nginx_gateway
    build:
      context: ${NGINX_PATH}
      dockerfile: Dockerfile.nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    init: true
    ports:
      - "80:80"
      - "443:443"
    restart: on-failure:3
    depends_on:
      - backend
    tty: true
    volumes:
      - "${NGINX_PATH}:/etc/nginx/conf.d"
    networks:
      - transcendence

  certificate-generator:
    container_name: certificate-generator
    build:
      context: ${CERTIFICATE_PATH}
      dockerfile: Dockerfile.certificate
    volumes:
      - ${CERTIFICATE_PATH}/certs:/etc/ssl/certs
    networks:
      - transcendence

  prometheus:
    container_name: prometheus
    env_file:
      - ${BE_ENV_PATH}
    build:
      context: ${PROMETHEUS_PATH}
      dockerfile: Dockerfile.prometheus
    depends_on:
      - certificate-generator
    volumes:
      - ${PROMETHEUS_PATH}/data:/prometheus
      - ${CERTIFICATE_PATH}/certs:/etc/ssl/certs
    ports:
      - "9090:9090"
    networks:
      - transcendence
    entrypoint:
      - "/usr/local/bin/entrypoint.sh"
      - "/etc/ssl/certs/prometheus-selfsigned.crt"
      - "60"
      - "/opt/prometheus/prometheus"
      - "--config.file=/opt/prometheus/prometheus.yml"
      - "--web.config.file=/opt/prometheus/web.yml"
      - "--storage.tsdb.retention=14d"
    restart: always

  node-exporter:
    container_name: node-exporter
    env_file:
      - ${BE_ENV_PATH}
    build:
      context: ${PROMETHEUS_PATH}
      dockerfile: Dockerfile.node-exporter
    depends_on:
      - certificate-generator
    volumes:
      - ${CERTIFICATE_PATH}/certs:/etc/ssl/certs
    ports:
      - "9100:9100"
    networks:
      - transcendence
    entrypoint:
      - "/usr/local/bin/entrypoint.sh"
      - "/etc/ssl/certs/node-exporter-selfsigned.crt"
      - "60"
      - "/usr/local/bin/node_exporter"
      - "--web.listen-address=:9100"
      - "--web.config=opt/node-exporter/web.yml"
    restart: always


  alertmanager:
    container_name: alertmanager
    env_file:
      - ${BE_ENV_PATH}
    build:
      context: ${PROMETHEUS_PATH}
      dockerfile: Dockerfile.alertmanager
    depends_on:
      - certificate-generator
    volumes:
      - ${CERTIFICATE_PATH}/certs:/etc/ssl/certs
    ports:
      - "9093:9093"
    networks:
      - transcendence
    entrypoint:
      - "/usr/local/bin/entrypoint.sh"
      - "/etc/ssl/certs/alertmanager-selfsigned.crt"
      - "60"
      - "/usr/local/bin/alertmanager"
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
      - "--web.config.file=/opt/alertmanager/web.yml"
    restart: always

  grafana:
    container_name: grafana
    build:
      context: ${GRAFANA_PATH}
      dockerfile: Dockerfile.grafana
    volumes:
      - ${GRAFANA_PATH}/data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - transcendence

networks:
  transcendence:
    name: transcendence
    driver: bridge

